From dc174798c83c5eb55516bd0660ea99db36c7fed1 Mon Sep 17 00:00:00 2001
From: freedomcondor <zhuweixu_harry@126.com>
Date: Wed, 21 Feb 2018 11:29:16 +0100
Subject: [PATCH] pca954xmarked

---
 drivers/i2c/muxes/i2c-mux-pca954x.c | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/drivers/i2c/muxes/i2c-mux-pca954x.c b/drivers/i2c/muxes/i2c-mux-pca954x.c
index 7b992db..0af982e 100644
--- a/drivers/i2c/muxes/i2c-mux-pca954x.c
+++ b/drivers/i2c/muxes/i2c-mux-pca954x.c
@@ -351,9 +351,13 @@ static int pca954x_probe(struct i2c_client *client,
 	const struct of_device_id *match;
 	int ret;
 
+	dev_err(&client->dev, "pca954x probe start\n");
+
 	if (!i2c_check_functionality(adap, I2C_FUNC_SMBUS_BYTE))
 		return -ENODEV;
 
+	dev_err(&client->dev, "check functionality done\n");
+
 	muxc = i2c_mux_alloc(adap, &client->dev,
 			     PCA954X_MAX_NCHANS, sizeof(*data), 0,
 			     pca954x_select_chan, pca954x_deselect_mux);
@@ -361,6 +365,8 @@ static int pca954x_probe(struct i2c_client *client,
 		return -ENOMEM;
 	data = i2c_mux_priv(muxc);
 
+	dev_err(&client->dev, "mux alloc done\n");
+
 	i2c_set_clientdata(client, muxc);
 	data->client = client;
 
@@ -369,6 +375,8 @@ static int pca954x_probe(struct i2c_client *client,
 	if (IS_ERR(gpio))
 		return PTR_ERR(gpio);
 
+	dev_err(&client->dev, "devm_gpiod_get_optional done\n");
+
 	/* Write the mux register at addr to verify
 	 * that the mux is in fact present. This also
 	 * initializes the mux to disconnected state.
@@ -378,6 +386,8 @@ static int pca954x_probe(struct i2c_client *client,
 		return -ENODEV;
 	}
 
+	dev_err(&client->dev, "write byte done\n");
+
 	match = of_match_device(of_match_ptr(pca954x_of_match), &client->dev);
 	if (match)
 		data->chip = of_device_get_match_data(&client->dev);
@@ -389,39 +399,58 @@ static int pca954x_probe(struct i2c_client *client,
 	idle_disconnect_dt = of_node &&
 		of_property_read_bool(of_node, "i2c-mux-idle-disconnect");
 
+	dev_err(&client->dev, "before goto\n");
+
 	ret = pca954x_irq_setup(muxc);
 	if (ret)
 		goto fail_del_adapters;
 
+	dev_err(&client->dev, "after goto\n");
+
 	/* Now create an adapter for each channel */
 	for (num = 0; num < data->chip->nchans; num++) {
 		bool idle_disconnect_pd = false;
 
+		dev_err(&client->dev, "in for\n");
+
 		force = 0;			  /* dynamic adap number */
 		class = 0;			  /* no class by default */
 		if (pdata) {
+			dev_err(&client->dev, "in if pdata\n");
 			if (num < pdata->num_modes) {
 				/* force static number */
 				force = pdata->modes[num].adap_id;
 				class = pdata->modes[num].class;
+				dev_err(&client->dev, "in if num<pdata->num\n");
 			} else
+			{
+				dev_err(&client->dev, "in if before break\n");
 				/* discard unconfigured channels */
 				break;
+			}
 			idle_disconnect_pd = pdata->modes[num].deselect_on_exit;
 		}
 		data->deselect |= (idle_disconnect_pd ||
 				   idle_disconnect_dt) << num;
 
+		dev_err(&client->dev, "before goto\n");
+
 		ret = i2c_mux_add_adapter(muxc, force, num, class);
 		if (ret)
 			goto fail_del_adapters;
+
+		dev_err(&client->dev, "after goto fail_del_adapters\n");
 	}
 
+	dev_err(&client->dev, "after for\n");
+
 	dev_info(&client->dev,
 		 "registered %d multiplexed busses for I2C %s %s\n",
 		 num, data->chip->muxtype == pca954x_ismux
 				? "mux" : "switch", client->name);
 
+	dev_err(&client->dev, "before return\n");
+
 	return 0;
 
 fail_del_adapters:
-- 
2.7.4

